name: Build

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  schedule:
    - cron: '52 2/3 * * *'

env:
  PROJECT_NAME: VivaldiCustomLauncher
  BUILD_CONFIG: Release

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Clone
        uses: actions/checkout@v3

      - name: Read Vivaldi version of existing test data
        id: existing-test-data
        run: |
          $existingVersion = (Get-Content .\Tests\Data\vivaldi-version.txt -TotalCount 1).Trim()
          Out-File -InputObject "EXISTING_VERSION=$existingVersion" -FilePath $env:GITHUB_ENV -Append -Encoding UTF8 
          Write-Output "Repository's existing test data is from Vivaldi $existingVersion"

      - name: Check for latest Vivaldi version
        id: latest-version
        run: |
          Invoke-WebRequest "https://vivaldi.com/wp-content/vivaldi-versions.js?_=$([System.DateTimeOffset]::UtcNow.ToUnixTimeSeconds())" -OutFile vivaldi-versions.js

          Out-File -FilePath .\vivaldi-versions.js -Append -Encoding UTF8 -InputObject ";`
            const { writeFileSync } = require('node:fs');
            const { env } = require('node:process');

            const latestVersion = vivaldi_versions.vivaldi_version_number;
            const downloadUrl = 'https://downloads.vivaldi.com/stable/' + vivaldi_versions.vivaldi_version_win64;

            const output =
              'LATEST_VERSION=' + latestVersion + '\r\n' +
              'DOWNLOAD_URL=' + downloadUrl + '\r\n';

            writeFileSync(env.GITHUB_ENV, output, { flag: 'a' });

            console.log('Latest Vivaldi version is '+latestVersion);
            console.log('Latest Vivaldi can be downloaded from '+downloadUrl);"

          node .\vivaldi-versions.js

      - name: Download Vivaldi
        run: |
          Write-Output "Downloading Vivaldi $env:LATEST_VERSION from $env:DOWNLOAD_URL"
          Invoke-WebRequest -Uri $env:DOWNLOAD_URL -OutFile vivaldi-installer.exe
      
      - name: Install Vivaldi
        run: |
          Write-Output "Installing Vivaldi in silent standalone mode"
          Start-Process -FilePath .\vivaldi-installer.exe -ArgumentList @(`
            '--vivaldi-silent',
            '--vivaldi-standalone',
            '--vivaldi-install-dir="${{ github.workspace }}\vivaldi-installation"',
            '--do-not-launch-chrome'
          ) -Wait
          Write-Output "Vivaldi installation finished"
          cat $env:TEMP\vivaldi_installer.log

      - name: Compare existing and latest version numbers
        run: |
          $isUpToDate = $env:EXISTING_VERSION -eq $env:LATEST_VERSION
          Out-File -InputObject "UP_TO_DATE=$isUpToDate" -FilePath $env:GITHUB_ENV -Append -Encoding UTF8
          If ($isUpToDate) {
            Write-Output "::notice title=No Vivaldi update::Test data was already up-to-date with the latest Vivaldi version ($env:LATEST_VERSION)."
          } Else {
            Write-Output "::notice title=Vivaldi update released::Test data version ($env:EXISTING_VERSION) is lower than the latest Vivaldi version ($env:LATEST_VERSION)."
            Out-File -InputObject "### Updated to Vivaldi **$env:LATEST_VERSION**" -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8 
          }

      - name: Copy installation files into test data
        run: |
          Copy-Item -Force -Path @(`
            '.\vivaldi-installation\Application\*\resources\vivaldi\bundle.js',
            '.\vivaldi-installation\Application\*\resources\vivaldi\background-common-bundle.js'
          ) -Destination .\Tests\Data\BundleScript\
          Write-Output "Updated bundle.js and background-common-bundle.js in test data"
          
      - name: Update version number in test data
        run: |
          Out-File -InputObject $env:LATEST_VERSION -FilePath .\Tests\Data\vivaldi-version.txt -Encoding UTF8
          Write-Output "Marked test data as coming from Vivaldi $env:LATEST_VERSION"
        
      - name: Commit and push new test data
        uses: EndBug/add-and-commit@v9
        env:
          HOME: "~" # get rid of a benign warning
        with:
          add: ./Tests/Data
          message: Update test data for Vivaldi ${{ env.LATEST_VERSION }}
          pathspec_error_handling: exitImmediately
          author_name: Ben Hutchison
          author_email: ben@aldaviva.com
          committer_name: GitHub Actions
          committer_email: 41898282+github-actions[bot]@users.noreply.github.com
          push: true

      - name: Restore solution
        run: msbuild -p:Configuration=$env:BUILD_CONFIG -t:restore -p:RestoreLockedMode=true

      - name: Build solution
        run: msbuild -p:Configuration=$env:BUILD_CONFIG -t:build

      - name: Smoke test tweaks
        run: dotnet test Tests --filter DisplayName~SmokeTests --configuration $env:BUILD_CONFIG --no-build --verbosity normal

      - name: Smoke test Vivaldi startup
        run: |
          echo "Tweaking standalone installation"

          Start-Process -FilePath ".\$env:PROJECT_NAME\bin\$env:BUILD_CONFIG\$env:PROJECT_NAME.exe" -ArgumentList @(`
            '--vivaldi-application-directory="${{ github.workspace }}\vivaldi-installation\Application"',
            '--do-not-launch-vivaldi'
          ) -Wait

          echo "Tweaks applied, starting Vivaldi"
          $vivaldiProcess = Start-Process -FilePath .\vivaldi-installation\Application\vivaldi.exe -ArgumentList @("--enable-logging", "--v=1") -PassThru
          echo "Started Vivaldi with PID $($vivaldiProcess.Id)"

          $debugLogFile = '.\vivaldi-installation\User Data\chrome_debug.log'
          $deadline = [DateTime]::Now.AddMinutes(3)

          while([DateTime]::Now -lt $deadline) {
            $logContents = Get-Content $debugLogFile -ErrorAction Ignore

            $consoleError = $logContents | where { $_ -like "*:ERROR:CONSOLE(*" } | select -First 1

            if($consoleError.Length -gt 0){
              Stop-Process $vivaldiProcess
              Write-Output "::error title=Failed to start Vivaldi::Error in Vivaldi console: $consoleError"
              exit 1
            } elseif(($logContents | where { $_ -like "*JS init startup:*" } | select -first 1).Length -gt 0){
              Stop-Process $vivaldiProcess
              Write-Output "Vivaldi started successfully with no console errors"
              exit 0
            }

            Start-Sleep -Seconds 2
          }

          Stop-Process $vivaldiProcess
          Write-Output "::error title=Failed to start Vivaldi::Timed out"
          exit 1

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME }}
          path: ${{ env.PROJECT_NAME }}\bin\${{ env.BUILD_CONFIG }}\*.exe
          if-no-files-found: error
